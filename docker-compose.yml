services:
    # Laravel PHP application container
    php:
        build:
            context: .  # Use the current directory as the build context
            dockerfile: docker/php.dockerfile  # Path to your PHP Dockerfile
        image: ${APP_NAME}_php:arm-dev  # Name and tag for the PHP image (pulled from .env)
        volumes:
            - songapp:/var/www/html  # Bind host volume to container's working directory
        env_file:
            - .env  # Load environment variables into the container

    # Nginx web server container
    web:
        build:
            context: .  # Same context for Nginx
            dockerfile: docker/nginx.dockerfile  # Path to Nginx Dockerfile
        image: ${APP_NAME}_nginx:arm-dev  # Name and tag for the Nginx image
        ports:
            - "${APP_PORT}:443"  # Map a custom port (from .env) to container port 443 (SSL)
        volumes:
            - songapp:/var/www/html  # Mount the same shared volume
        depends_on:
            - php  # Ensure the PHP container is started before Nginx tries to connect

    vite: # Vite.js development server container because volumes overwrite what is in the container I am using this to build assets locally then copy them to the container
        image: node:alpine  # Use a lightweight Node.js image as the base for the container
        working_dir: /usr/src/app  # Set the working directory inside the container
        volumes:
            - .:/usr/src/app  # Mount your entire local project directory into the container
        command: >
            sh -c "
                # Check if node_modules exists and isn't empty
                if [ ! -d node_modules ] || [ -z \"\$(ls -A node_modules)\" ]; then
                    echo 'Node modules not found, installing...';
                    npm install;  # Install dependencies if node_modules is missing or empty
                fi;
                echo 'Starting application...';
                npm run build && npm run watch # Build production assets, then start watch mode
            "

# Define shared named volume with driver options
volumes:
    songapp:
        driver: local  # Use Docker's local driver
        driver_opts:
            type: none  # We're binding a host directory (not a device)
            o: bind     # Mount mode: bind to host path
            device: ${VOLUME_LOCAL_MACHINE}  # Host path for your Laravel project (defined in .env)
